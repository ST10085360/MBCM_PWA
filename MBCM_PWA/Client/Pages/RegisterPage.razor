@layout RegisterLayout
@page "/registerpage"
@using MBCM_PWA.Client.Shared.Models
@using System.Text.Json
@using System.Text.RegularExpressions;
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject userService UserService

<PageTitle>Register</PageTitle>

<body>
    <div class="main-logo" style="margin-bottom:150px">
        <img id="logo" src="/css/MBCM_LOGO.png" alt="Logo" style="width: 250px; height: auto" />
    </div>
    <div class="login-container" style="margin-bottom:50px">
        <div class="login-form">
            <h1 class="text-center" style="color: white; margin-bottom:40px; margin-top:40px;">Register</h1>
            <h4 class="text-center" style="color: white; margin-bottom:40px; margin-top:10px;" >Please enter your information:</h4>

            <div class="row mb-1">
                @* /* EMAIL */ *@
                <label class="col-sm-4 col-form-label">
                    <img src="/css/email-icon.png" alt="Email Icon" class="mr-2 small-icon"> Email:
                </label>
                <div class="col-sm-6">
                    <div class="shadow-sm">
                        <input type="text" class="form-control form-control-sm" name="Email" id="Email" @bind="model.Email" />
                    </div>
                </div>
            </div>
            <!-- Display email validation error -->
            @if (!string.IsNullOrEmpty(model.EmailValidationMessage))
            {
                <div class="alert alert-danger small-error" role="alert">
                    @model.EmailValidationMessage
                </div>
            }

            <br />

            <div class="row mb-1">
                @* /* FIRST NAME */ *@
                <label class="col-sm-4 col-form-label">
                    <img src="/css/firstname-icon.png" alt="Password Icon" class="mr-2 small-icon"> First Name:
                </label>
                <div class="col-sm-6">
                    <div class="shadow-sm">
                        <input type="text" class="form-control form-control-sm" name="FirstName" id="FirstName" @bind="model.FirstName" />
                    </div>
                </div>
            </div>
            <!-- Display first name validation error -->
            @if (!string.IsNullOrEmpty(model.FirstNameValidationMessage))
            {
                <div class="alert alert-danger small-error" role="alert">
                    @model.FirstNameValidationMessage
                </div>
            }

            <br />

            <div class="row mb-1">
                @* /* LAST NAME */ *@
                <label class="col-sm-4 col-form-label">
                    <img src="/css/lastname-icon.png" alt="Email Icon" class="mr-2 small-icon"> Last Name:
                </label>
                <div class="col-sm-6">
                    <div class="shadow-sm">
                        <input type="text" class="form-control form-control-sm" name="LastName" id="LastName" @bind="model.LastName" />
                    </div>
                </div>
            </div>
            <!-- Display last name validation error -->
            @if (!string.IsNullOrEmpty(model.LastNameValidationMessage))
            {
                <div class="alert alert-danger small-error" role="alert">
                    @model.LastNameValidationMessage
                </div>
            }

            <br />

            <div class="row mb-1">
                @* /* Biography/ Description */ *@
                <label class="col-sm-4 col-form-label">
                    <img src="/css/bio-icon.png" alt="Password Icon" class="mr-2 small-icon"> Bio/Description:
                </label>
                <div class="col-sm-6">
                    <div class="shadow-sm">
                        <!-- Set the width of the textarea to match the other input fields -->
                        <textarea id="Bio" name="Bio" @bind="model.Bio" rows="5" class="form-control form-control-sm"></textarea>
                    </div>
                </div>
            </div>
            <!-- Display bio validation error -->
            @if (!string.IsNullOrEmpty(model.BioValidationMessage))
            {
                <div class="alert alert-danger small-error" role="alert">
                    @model.BioValidationMessage
                </div>
            }

            <br />

            <div class="row mb-1">
                @* /* PHONE NUMBER */ *@
                <label class="col-sm-4 col-form-label">
                    <img src="/css/phone-icon.png" alt="Email Icon" class="mr-2 small-icon"> Phone Number:
                </label>
                <div class="col-sm-6">
                    <div class="shadow-sm">
                        <input type="text" class="form-control form-control-sm" name="PhoneNum" id="PhoneNum" @bind="model.PhoneNum" />
                    </div>
                </div>
            </div>
            <!-- Display phone number validation error -->
            @if (!string.IsNullOrEmpty(model.PhoneNumValidationMessage))
            {
                <div class="alert alert-danger small-error" role="alert">
                    @model.PhoneNumValidationMessage
                </div>
            }

            <br />

            <div class="row mb-1">
                @* /* PASSWORD */ *@
                <label class="col-sm-4 col-form-label">
                    <img src="/css/password-ico.png" alt="Email Icon" class="mr-2 small-icon"> Password:
                </label>
                <div class="col-sm-6">
                    <div class="shadow-sm">
                        <input type="password" class="form-control form-control-sm" name="Password" id="Password" @bind="model.Password" />
                    </div>
                </div>
            </div>
            <!-- Display password validation error -->
            @if (!string.IsNullOrEmpty(model.PasswordValidationMessage))
            {
                <div class="alert alert-danger small-error" role="alert">
                    @model.PasswordValidationMessage
                </div>
            }

            <div class="row mb-1">
                @* /* CONFIRM PASSWORD */ *@
                <label class="col-sm-4 col-form-label">
                    <img src="/css/password-ico.png" alt="Password Icon" class="mr-2 small-icon"> Confirm password:
                </label>
                <div class="col-sm-6">
                    <div class="shadow-sm">
                        <input type="password" class="form-control form-control-sm" name="ConfirmPassword" id="ConfirmPassword" @bind="model.ConfirmPassword" />
                    </div>
                </div>
            </div> 
            <!-- Display confirm password validation error -->
            @if (!string.IsNullOrEmpty(model.ConfirmPasswordValidationMessage))
            {
                <div class="alert alert-danger small-error" role="alert">
                    @model.ConfirmPasswordValidationMessage
                </div>
            }

            <div class="text-center" style="margin-top:20px">
                <button style="height:40px; width:120px; background-color:orange; color:black; font-weight:600" @onclick="RegisterUser" class="btn btn-dark">Register</button>
                <br />
                <br />
                <p style="color: white;">Already have an account? <a href="/">Login here</a>.</p>
            </div>
            <br />
        </div>
    </div>
</body>

@code {
    [Parameter] public int UserId { get; set; }

    private UserRegistration model = new UserRegistration();
    

    private async Task RegisterUser()
    {
        try
        {
            // Reset validation messages
            model.EmailValidationMessage = string.Empty;
            model.FirstNameValidationMessage = string.Empty;
            model.LastNameValidationMessage = string.Empty;
            model.BioValidationMessage = string.Empty;
            model.PhoneNumValidationMessage = string.Empty;
            model.PasswordValidationMessage = string.Empty;
            model.ConfirmPasswordValidationMessage = string.Empty;

            // Validate the email
            if (string.IsNullOrEmpty(model.Email) || !model.Email.Contains("@"))
            {
                model.EmailValidationMessage = "Please enter a valid email address.";
                return;
            }

            // Validate first name
            if (string.IsNullOrEmpty(model.FirstName))
            {
                model.FirstNameValidationMessage = "Please enter your first name.";
                return;
            }

            // Validate last name
            if (string.IsNullOrEmpty(model.LastName))
            {
                model.LastNameValidationMessage = "Please enter your last name.";
                return;
            }

            // Validate bio
            if (string.IsNullOrEmpty(model.Bio))
            {
                model.BioValidationMessage = "Please enter a bio/description.";
                return;
            }

            // Validate phone number
            if (string.IsNullOrEmpty(model.PhoneNum))
            {
                model.PhoneNumValidationMessage = "Please enter your phone number.";
                return;
            }

            // South African phone number regex pattern
            string saPhoneNumberPattern = @"^((\+27)|0)([6-8][0-9])\d{7}$";
            if (!Regex.IsMatch(model.PhoneNum, saPhoneNumberPattern))
            {
                model.PhoneNumValidationMessage = "Please enter a valid South African phone number.";
                return;
            }

            // Validate the password
            if (string.IsNullOrEmpty(model.Password))
            {
                model.PasswordValidationMessage = "Please enter a password.";
                return;
            }

            // Validate the confirm password
            if (string.IsNullOrEmpty(model.ConfirmPassword) || model.ConfirmPassword != model.Password)
            {
                model.ConfirmPasswordValidationMessage = "Please confirm your password.";
                return;
            }

            var response = await httpClient.PostAsJsonAsync("api/Projects/register", model);

            if (!response.IsSuccessStatusCode)
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
            }

            if (response.IsSuccessStatusCode)
            {
                var userIdResponse = await httpClient.GetStringAsync($"api/Projects/getUserId?email={model.Email}");
                if (int.TryParse(userIdResponse, out var userId))
                {
                    UserService.SetUserId(userId);    
                    // Reset model
                    model = new UserRegistration();

                    // Navigate to projects page
                    NavigationManager.NavigateTo($"/volunteer");
                    return;
                }
            }
            else
            {
            }
        }
        catch (Exception ex)
        {
        }
    }
}
}


