@page "/adminprojects"
@using System.Net.Http.Json
@using MBCM_PWA.Client.Shared.Models
@using System.Net.Http.Json
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject userService UserService

@if (UserService.UserType == "Admin")
{
    <div class="container">

        <div class="active-projects">

<div class="add-proj-header">
<h3 class="active-head">Active Projects:</h3>
<div class="new-btn">
    <button class="add-btn" @onclick="ShowAddActiveProjectPage">
        <span class="icon"><img class="new-img" src="/css/NewProject.png" alt="location" /></span>
        <span class="plus-text">Add New Active Project</span>
    </button>
</div>
        </div>
            <div class="active-grid">
                @{
                    var groupedUserProjects = userProjects.GroupBy(up => up.projectID);
                }
                @foreach (var projectState in projectStates)
                {
                    <div class="project-cell">
                        <h4>@projectState.Project.prjTitle</h4>
                        <p>@projectState.Project.prjDescription</p>
                        <div class="members-dropdown">
                            Members:
                            @if (groupedUserProjects.Any())
                            {
                                var projectUsers = groupedUserProjects.SingleOrDefault(group => group.Key == projectState.Project.ProjectID)?.ToList();

                                if (projectUsers != null)
                                {
                                    foreach (var user in projectUsers)
                                    {
                                        <div class="member" style="margin-top: 10px;">
                                            @user.User.firstName @user.User.lastName
                                            <button class="primary" title="Remove this volunteer from the member group" @onclick="() => ConfirmRemoveUserFromProject(user.userProjectID)">X</button>
                                        </div>
                                    }
                                }
                            }
                        </div>
                    </div>
                }
            </div>

        </div>

        <!-- Confirmation Modal for Remove User From Project -->
        @if (showConfirmation)
        {
            <div class="modal" tabindex="-1" style="display: block;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirm Removal</h5>
                            <button type="button" class="btn-close" @onclick="CancelRemoveUserFromProject"></button>
                        </div>
                        <div class="modal-body">
                            Are you sure you want to remove the user from the project?
                        </div>
                        <div class="modal-footer">
                            <button title="Cancel this action" type="button" class="btn btn-secondary" @onclick="CancelRemoveUserFromProject">Cancel</button>
                            <button title="Remove this user" type="button" class="btn btn-danger" @onclick="RemoveUserFromProject">Remove</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="requests">
            <h3>Project Requests</h3>
            <div class="request-grid">
                @foreach (var request in projectRequests)
                {
                    <div class="project-cell">
                        <h4>Project: @request.Project.prjTitle</h4>
                        <div>
                            <div>User: @request.User.firstName @request.User.lastName</div>
                            <div>Bio: @request.User.userBio</div>
                            <div>Email: @request.User.userEmail</div>
                        </div>
                        <div>
                            <button title="Accept this user's request" class="btn btn-success btn-sm" @onclick="() => AcceptRequest(request)">Accept</button>
                            <button title="Decline this user's request" class="btn btn-danger btn-sm" @onclick="() => DeclineRequest(request)">Decline</button>
                        </div>
                    </div>
                }
            </div>
        </div>

<div class="active-users">
<h3>Users</h3>
<div class="user-grid">
    @foreach (var user in users)
    {
        <div class="user-cell">
            <p class="user-field" >@user.firstName @user.lastName</p>
            <p class="user-field">@user.userEmail</p>
            <p class="user-field">@user.userPhoneNumber</p>
            <button title="Delete Account" class="primary" @onclick="() => ConfirmRemoveUser(user.UserID)">X</button>
            
            
        </div>
    }
</div>
</div>


        <!-- Confirmation Modal for Remove User -->
        @if (showUserRemoveConfirmation)
        {
            <div class="modal" tabindex="-1" style="display: block;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirm User Removal</h5>
                            <button type="button" class="btn-close" @onclick="CancelRemoveUser"></button>
                        </div>
                        <div class="modal-body">
                            Are you sure you want to remove the user?
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CancelRemoveUser">Cancel</button>
                            <button type="button" class="btn btn-danger" @onclick="RemoveUser">Remove</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div>Page not accessible</div>
}


@code {
    List<ProjectState> projectStates = new List<ProjectState>();
    List<Project> projects;
    List<ProjectRequest> projectRequests;
    List<User> users;
    private List<UserProjects> userProjects;

    bool showConfirmation;
    int userProjectIdToRemove;
    bool showUserRemoveConfirmation;
    int userIdToRemove;


    protected override async Task OnInitializedAsync()
    {
        int? userId = UserService.UserId;
        projects = await HttpClient.GetFromJsonAsync<List<Project>>("api/projects");
        projectRequests = await HttpClient.GetFromJsonAsync<List<ProjectRequest>>("api/projects/project-requests");
        users = await HttpClient.GetFromJsonAsync<List<User>>("api/projects/users");
        userProjects = await HttpClient.GetFromJsonAsync<List<UserProjects>>("api/projects/user-projects");

        projectStates = projects.Select(project => new ProjectState
            {
                Project = project,
                UserId = userId.GetValueOrDefault()
            }).ToList();
    }

    private async Task AcceptRequest(ProjectRequest request)
    {
        await HttpClient.PostAsync($"api/projects/accept-request/{request.RequestID}", null);
        projectRequests.Remove(request);
    }

    private async Task DeclineRequest(ProjectRequest request)
    {
        await HttpClient.PostAsync($"api/projects/decline-request/{request.RequestID}", null);
        projectRequests.Remove(request);
    }

    private void ShowAddActiveProjectPage()
    {
        NavigationManager.NavigateTo("/addactiveprojectpage");
    }

    private void ConfirmRemoveUserFromProject(int userProjectID)
    {
        userProjectIdToRemove = userProjectID;
        showConfirmation = true;
    }

    private async Task RemoveUserFromProject()
    {
        await HttpClient.DeleteAsync($"api/projects/remove-user-from-project/{userProjectIdToRemove}");
        userProjects.RemoveAll(up => up.userProjectID == userProjectIdToRemove);
        showConfirmation = false;
    }

    private void CancelRemoveUserFromProject()
    {
        showConfirmation = false;
    }

    private void ConfirmRemoveUser(int userId)
    {
        userIdToRemove = userId;
        showUserRemoveConfirmation = true;
    }

    private async Task RemoveUser()
    {
        await HttpClient.DeleteAsync($"api/projects/remove-user/{userIdToRemove}");
        users.RemoveAll(u => u.UserID == userIdToRemove);
        showUserRemoveConfirmation = false;
    }

    private void CancelRemoveUser()
    {
        showUserRemoveConfirmation = false;
    }

    public class ProjectState
    {
        public Project Project { get; set; }
        public int UserId { get; set; } // Add this property
    }
}

