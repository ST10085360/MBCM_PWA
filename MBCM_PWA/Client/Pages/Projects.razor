@page "/projects"
@using System.Net.Http.Json
@using MBCM_PWA.Client.Shared.Models
@using Microsoft.AspNetCore.Components.Web.Extensions
@inject HttpClient HttpClient
@inject userService UserService;
@inject NavigationManager NavigationManager


<PageTitle>Projects</PageTitle>
<div class="main-container">
    <div class="splash-background">
        <h1 style="margin-top: 7%;">Active Community Projects</h1>

        @* /* PROJECT TILE TEMPLATE STYLING */ *@
        @foreach (var projectState in projectStates)
        {
            bool isJoined = userProjects.Any(up => up.projectID == projectState.Project.ProjectID && up.userID == projectState.UserId);
            Console.WriteLine($"Project ID: {projectState.Project.ProjectID}, Is User Joined: {isJoined}");

                <div class="project-tile">
                    <div class="proj-left">
                        <div class="title-div"><p>@projectState.Project.prjTitle</p></div>
                    </div>
                    <div class="proj-right">
                        <div class="info-div">
                            <img class="info-img" src="/css/calendar.png" alt="location" />
                            <h5 class="info-text">@projectState.Project.prjStartDate.ToShortDateString()</h5>
                        </div>
                        <div class="info-div">
                            <img class="info-img" src="/css/pin.png" alt="location" />
                            <h5 class="info-text">@projectState.Project.prjLocation</h5>
                        </div>
                        <div class="info-div">
                            <img class="info-img" src="/css/group.png" />
                            <h5 class="info-text">@projectState.Project.ProjectID</h5>  @*NEED TO ADD MEMBER COUNT FOR THE PROJECTS*@
                        </div>
                        <div class="proj-btns">

                            @if (isJoined)
                        {
                            <span class="disabled-btn">Already Joined</span>
                        }
                        else
                        {
                            <button class="btn btn-primary" style="@projectState.ButtonColor" @onclick="() => SendRequest(projectState)">
                                @projectState.ButtonText
                            </button>
                        }
                        </div>
                    </div>
                </div>
            
            
        }
    </div>
</div>



@code {
    List<ProjectState> projectStates = new List<ProjectState>();
    private List<UserProjects> userProjects;
    UserLogin loginModel = new UserLogin();
    private string JOINED = "Already Joined";

    protected override async Task OnInitializedAsync()
    {
        int? userId = UserService.UserId;
        Console.WriteLine($"UserId: {userId}");

        userProjects = await HttpClient.GetFromJsonAsync<List<UserProjects>>($"api/Projects/getUserProjects/{userId}");

        var projects = await HttpClient.GetFromJsonAsync<List<Project>>("api/projects");
        projectStates = projects.Select(project => new ProjectState
            {
                Project = project,
                ButtonText = "Request to Join",
                ButtonColor = "#1B6EC2",
                UserId = userId.GetValueOrDefault()
            }).ToList();
    }

    public async Task SendRequest(ProjectState projectState)
    {
        if (UserService.UserType == "Guest")
        {
            NavigationManager.NavigateTo("/registerpage");
        }
        // Check if the user is already part of the project
        var userProjects = await HttpClient.GetFromJsonAsync<List<UserProjects>>($"api/projects/user-projects");
        if (userProjects.Any(up => up.userID == UserService.UserId && up.projectID == projectState.Project.ProjectID))
        {
            SetRequestFailedStatus(projectState);
            return; // User is already part of the project, do not send a new request
        }

        // Check if the user has already requested to join
        var existingRequest = await HttpClient.GetFromJsonAsync<List<ProjectRequest>>($"api/projects/project-requests");
        if (existingRequest.Any(req => req.UserID == UserService.UserId && req.ProjectID == projectState.Project.ProjectID))
        {
            SetRequestFailedStatus(projectState);
            return; // User has already requested to join, do not send a new request
        }

        // If the user is not part of the project and has not requested to join, proceed to send a new request
        var response = await HttpClient.PostAsync($"api/projects/send-request/{projectState.Project.ProjectID}?userId={projectState.UserId}", null);

        if (response.IsSuccessStatusCode)
        {
            SetRequestSentStatus(projectState);
        }
        else
        {
            SetRequestFailedStatus(projectState);
        }
    }

    private void SetRequestSentStatus(ProjectState projectState)
    {
        projectState.ButtonText = "Request Sent";
        projectState.ButtonColor = "background-color:#F6B000";
    }

    private void SetRequestFailedStatus(ProjectState projectState)
    {
        projectState.ButtonText = "Request Failed";
        projectState.ButtonColor = "background-color: var(--error-primary)";
    }


    public class ProjectState
    {
        public Project Project { get; set; }
        public string ButtonText { get; set; }
        public string ButtonColor { get; set; }
        public int UserId { get; set; } // Add this property
    }
}

