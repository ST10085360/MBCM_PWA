@page "/suggestions"
@using System.Net.Http.Json
@using MBCM_PWA.Client.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject userService UserService

<PageTitle>Suggestions</PageTitle>
<div class="main-container">
    <div class="splash-background">
        <h1 style="margin-top: 7%;">Community Project Suggestions</h1>

        @if (UserService.UserType != null && UserService.UserType.ToLower() == "admin" || UserService.UserType != null && UserService.UserType.ToLower() == "volunteer")
        {
            <br />
            <div class="center">
                <button class="primary" @onclick="NavigateToAddProjectPage" style="margin: 0 auto; display: block; background-color:orange; border-color:orange">Add Project Suggestion</button>
            </div>
        }

        @if (suggestedProjects != null)
        {
            @foreach (var project in suggestedProjects)
            {
                <div class="suggestion-tile">
                    <div class="sugg-left">
                        <div class="title-div">
                            <p>@project.Title</p>
                        </div>
                    </div>
                    <div class="sugg-right">
                        <div class="event-div">
                            
                        </div>
                        <div class="desc-div">
                            @* Add null check for project *@
                            @if (project != null)
                            {
                                <h5 id="ev">@project.Description</h5>
                            }
                        </div>
                        @if (UserService.UserType != null && UserService.UserType.ToLower() == "admin")
                        {
                            <div class="center">
                                <button class="delete-button" @onclick="() => ConfirmDeleteSuggestion(project.ProjectID)">Delete</button>
                            </div>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
</div>
<!-- Confirmation Modal for Delete Suggestion -->
@if (showDeleteConfirmation)
{
    <div class="modal" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="CancelDeleteSuggestion"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete the suggestion?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDeleteSuggestion">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="() => DeleteSuggestion(selectedSuggestionId)">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    List<SuggestedProject> suggestedProjects;
    SuggestedProject newProject = new SuggestedProject();

    bool showDeleteConfirmation;
    int selectedSuggestionId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch project data from the API endpoint (replace with your actual API endpoint)
            await RefreshSuggestedProjects();
        }
        catch (Exception ex)
        {
            // Handle the exception (log or display an error message)
            Console.WriteLine($"Error fetching project data: {ex.Message}");
        }
    }

    private void NavigateToAddProjectPage()
    {
        NavigationManager.NavigateTo("/addprojectpage");
    }

    private async Task RefreshSuggestedProjects()
    {
        suggestedProjects = await Http.GetFromJsonAsync<List<SuggestedProject>>("api/Projects/project-suggestions");
    }

    private void ConfirmDeleteSuggestion(int projectId)
    {
        selectedSuggestionId = projectId;
        showDeleteConfirmation = true;
    }

    private async void DeleteSuggestion(int projectId)
    {
        try
        {
            // Make an API call to delete the suggestion
            await Http.DeleteAsync($"api/Projects/delete-suggestion/{projectId}");

            // Refresh the list of suggestions
            await RefreshSuggestedProjects();
        }
        catch (Exception ex)
        {
            // Handle the exception (log or display an error message)
            Console.WriteLine($"Error deleting suggestion: {ex.Message}");
        }
        finally
        {
            // Close the confirmation modal
            showDeleteConfirmation = false;
        }
    }

    private void CancelDeleteSuggestion()
    {
        // Close the confirmation modal
        showDeleteConfirmation = false;
    }
}
